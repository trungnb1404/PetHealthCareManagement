/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trungnb.views;

import java.awt.Color;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import trungnb.daos.RegistrationDAO;
import trungnb.daos.RegistrationInterface;
import trungnb.dtos.RegistrationDTO;

/**
 *
 * @author PC
 */
public class RegistrationManagement extends javax.swing.JFrame {

    String filename = "PetManagement.txt";
    String servicename = "rmi://localhost:1098/RegistrationServerImp";
    RegistrationInterface regInterface;
    DefaultTableModel model;
    RegistrationDAO dao;
    boolean addnew = false;

    /**
     * Creates new form RegistrationManagement
     */
    public RegistrationManagement() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtRegistrationID2 = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        txtFullName = new javax.swing.JTextField();
        rbMale = new javax.swing.JRadioButton();
        rbFemale = new javax.swing.JRadioButton();
        txtPhone = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtNumberOfPEt = new javax.swing.JTextField();
        btnAddNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        txtEmail = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        txtSymptoms = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRegistration = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtSearchByName = new javax.swing.JTextField();
        cbSortByName = new javax.swing.JComboBox<>();
        btnGetAllData = new javax.swing.JButton();
        btnSearchByName = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Detail part", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(0, 204, 102))); // NOI18N

        jLabel17.setBackground(new java.awt.Color(0, 0, 0));
        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("Registration ID:");

        jLabel18.setBackground(new java.awt.Color(0, 0, 0));
        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setText("Full Name:");

        jLabel19.setBackground(new java.awt.Color(0, 0, 0));
        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel19.setText("Email :");

        jLabel20.setBackground(new java.awt.Color(0, 0, 0));
        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel20.setText("Phone :");

        jLabel21.setBackground(new java.awt.Color(0, 0, 0));
        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel21.setText("Address : ");

        jLabel22.setBackground(new java.awt.Color(0, 0, 0));
        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel22.setText("Number of pet :");

        jLabel23.setBackground(new java.awt.Color(0, 0, 0));
        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel23.setText("Age :");

        txtRegistrationID2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRegistrationID2ActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtFullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFullNameActionPerformed(evt);
            }
        });

        buttonGroup1.add(rbMale);
        rbMale.setSelected(true);
        rbMale.setText("Male");

        buttonGroup1.add(rbFemale);
        rbFemale.setText("Female");

        txtPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneActionPerformed(evt);
            }
        });

        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });

        txtNumberOfPEt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumberOfPEtActionPerformed(evt);
            }
        });

        btnAddNew.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAddNew.setText("Add New");
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel24.setText("Gender :");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel25.setText("Symptoms :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(37, 37, 37))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(31, 31, 31)))
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtRegistrationID2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearch))
                            .addComponent(txtAddress, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPhone, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtFullName)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtNumberOfPEt, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(txtSymptoms)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rbMale)
                                .addGap(18, 18, 18)
                                .addComponent(rbFemale))
                            .addComponent(txtEmail))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRegistrationID2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbMale)
                    .addComponent(rbFemale)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumberOfPEt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(txtSymptoms, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("Pet Healthcare Management");

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(204, 0, 51));
        jLabel26.setText("® Made by Nguyen Bao Trung");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Main part", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(0, 51, 255))); // NOI18N

        tblRegistration.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRegistration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegistrationMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblRegistration);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(51, 153, 0));
        jLabel2.setText("Sort by name:");

        cbSortByName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cbSortByName.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None", "Sort ascending", "Sort descending" }));
        cbSortByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSortByNameActionPerformed(evt);
            }
        });

        btnGetAllData.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnGetAllData.setText("GET ALL DATA");
        btnGetAllData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetAllDataActionPerformed(evt);
            }
        });

        btnSearchByName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSearchByName.setText("SEARCH BY NAME");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearchByName)
                    .addComponent(cbSortByName, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 20, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGetAllData, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(53, 53, 53))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSortByName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGetAllData, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(80, 80, 80))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(364, 364, 364)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel26)
                        .addGap(75, 75, 75))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel26)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void loadData() {
        Vector header = new Vector();
        Vector data = new Vector();
        header.add("ID");
        header.add("Full name");
        header.add("Age");
        header.add("Gender");
        header.add("Phone");
        header.add("Address");
        ArrayList<RegistrationDTO> list = RegistrationDAO.readFile(filename);
        for (RegistrationDTO x : list) {
            Vector row = new Vector();
            row.add(x.getRegistrationID());
            row.add(x.getFullname());
            row.add(x.getAge());
            if (x.isGender()) {
                row.add("Male");
            } else {
                row.add("Female");
            }
            row.add(x.getPhone());
            row.add(x.getAddress());
            data.add(row);
            model = (DefaultTableModel) tblRegistration.getModel();
            model.setDataVector(data, header);
        }
        cbSortByName.setSelectedIndex(0);
        cbSortByName.setEnabled(true);
    }

    public void setEmpty() {
        txtRegistrationID2.setText("");
        txtFullName.setText("");
        txtAge.setText("");
        rbMale.setSelected(false);
        rbFemale.setSelected(false);
        txtEmail.setText("");
        txtPhone.setText("");
        txtAddress.setText("");
        txtNumberOfPEt.setText("");
        txtSymptoms.setText("");
    }

    public void setEdit() {
        txtFullName.setEditable(true);
        txtAge.setEditable(true);
        rbMale.setEnabled(true);
        rbFemale.setEnabled(true);
        txtEmail.setEditable(true);
        txtPhone.setEditable(true);
        txtAddress.setEditable(true);
        txtNumberOfPEt.setText("");
        txtSymptoms.setText("");

    }

    public void setnoEdit() {
        txtRegistrationID2.setEditable(false);
        txtFullName.setEditable(false);
        txtAge.setEditable(false);
        rbMale.setEnabled(false);
        rbFemale.setEnabled(false);
        txtEmail.setEditable(false);
        txtPhone.setEditable(false);
        txtAddress.setEditable(false);
        txtNumberOfPEt.setText("");
        txtSymptoms.setText("");

    }

    private void txtRegistrationID2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRegistrationID2ActionPerformed
        String readerID = txtRegistrationID2.getText().trim();
    }//GEN-LAST:event_txtRegistrationID2ActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        addnew = false;
        ArrayList<RegistrationDTO> list = RegistrationDAO.readFile(filename);
        String id = txtRegistrationID2.getText();
        loadData();
        txtSearchByName.setText("");
        cbSortByName.setSelectedIndex(0);
        Vector header = new Vector();
        Vector data = new Vector();
        header.add("ID");
        header.add("Full name");
        header.add("Age");
        header.add("Gender");
        header.add("Phone");
        header.add("Address");
        btnSave.setEnabled(true);
        btnDelete.setEnabled(false);
        try {
            regInterface = (RegistrationInterface) Naming.lookup(servicename);
            if (regInterface.findByRegistrationID(id) != null) {
                for (int i = 0; i < list.size(); i++) {
                    if (list.get(i).getRegistrationID().equals(id)) {
                        txtRegistrationID2.setEditable(false);
                        txtRegistrationID2.setBackground(Color.gray);
                        setEdit();
                        Vector row = new Vector();
                        row.add(list.get(i).getRegistrationID());
                        row.add(list.get(i).getFullname());
                        row.add(list.get(i).getAge());
                        if (list.get(i).isGender()) {
                            row.add("Male");
                        } else {
                            row.add("Female");
                        }
                        row.add(list.get(i).getPhone());
                        row.add(list.get(i).getAddress());
                        data.add(row);
                        model = (DefaultTableModel) tblRegistration.getModel();
                        model.setDataVector(data, header);
                        
                        txtRegistrationID2.setText(list.get(i).getRegistrationID());
                        txtFullName.setText(list.get(i).getFullname());
                        txtAge.setText(String.valueOf(list.get(i).getAge()));
                        if (list.get(i).isGender()) {
                            rbMale.setSelected(true);
                            rbFemale.setSelected(false);
                        } else {
                            rbMale.setSelected(false);
                            rbFemale.setSelected(true);
                        }
                        txtEmail.setText(list.get(i).getEmail());
                        txtPhone.setText(list.get(i).getPhone());
                        txtAddress.setText(list.get(i).getAddress());
                        txtNumberOfPEt.setText(String.valueOf(list.get(i).getNumberOfPet()));
                        txtSymptoms.setText(list.get(i).getSymptoms());
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Registration ID not exists");
                setnoEdit();
                btnSave.setEnabled(false);
                txtRegistrationID2.setEditable(true);
                
            }
        } catch (NotBoundException ex) {
            Logger.getLogger(RegistrationManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(RegistrationManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            Logger.getLogger(RegistrationManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtFullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFullNameActionPerformed
        String fullName = txtFullName.getText().trim();
    }//GEN-LAST:event_txtFullNameActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        String email = txtPhone.getText().trim();
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        String phone = txtAddress.getText().trim();
    }//GEN-LAST:event_txtAddressActionPerformed

    private void txtNumberOfPEtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumberOfPEtActionPerformed
        String address = txtNumberOfPEt.getText().trim();
    }//GEN-LAST:event_txtNumberOfPEtActionPerformed

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        txtSearchByName.setText("");
        txtRegistrationID2.setBackground(Color.white);

        addnew = true;

        setEmpty();
        txtRegistrationID2.setEditable(true);
        txtRegistrationID2.requestFocus();
        setEdit();
        btnSave.setEnabled(true);
        btnDelete.setEnabled(false);
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            regInterface = (RegistrationInterface) Naming.lookup(servicename);
            int pos = tblRegistration.getSelectedRow();
            String id = (String) tblRegistration.getValueAt(pos, 0);
            if (regInterface != null) {
                int temp = JOptionPane.showConfirmDialog(null, "Do you want to delete it?");
                if (temp == JOptionPane.YES_OPTION) {
                    if (regInterface.removeRegistration(id)) {
                        JOptionPane.showMessageDialog(null, "Remove successfully !!");
                        txtRegistrationID2.setBackground(Color.white);
                        loadData();
                    }
                }else if(temp == JOptionPane.NO_OPTION){
                    
                    return;
                    
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "can't connect with your server");
        }
        setEmpty();
        setnoEdit();
        txtRegistrationID2.setEditable(true);
        btnSave.setEnabled(false);
        btnDelete.setEnabled(false);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        ArrayList<RegistrationDTO> list = RegistrationDAO.readFile(filename);
        boolean gender = false;
        
         
        String id = txtRegistrationID2.getText();
        StringBuilder sb = new StringBuilder();
        sb.append(CheckInput.checkID(txtRegistrationID2.getText().trim()));
        sb.append(CheckInput.checkName(txtFullName.getText().trim()));
        sb.append(CheckInput.checkAge(txtAge.getText().trim()));
        
        sb.append(CheckInput.checkEmail(txtEmail.getText().trim()));
        sb.append(CheckInput.checkPhone(txtPhone.getText().trim()));
        sb.append(CheckInput.checkAddress(txtAddress.getText().trim()));
        sb.append(CheckInput.checkNumOfPet(txtNumberOfPEt.getText().trim()));
        sb.append(CheckInput.checkSymptoms(txtSymptoms.getText().trim()));

        if (sb.length() > 0) {
            JOptionPane.showMessageDialog(this, sb.toString(), "Notify", JOptionPane.ERROR_MESSAGE);
            return;
        }
//         int age = Integer.parseInt(txtAge.getText().trim());
        String registrationID = txtRegistrationID2.getText().trim();
        String fullName = txtFullName.getText().trim();
        String email = txtEmail.getText().trim();
        String phone = txtPhone.getText().trim();
        String address = txtAddress.getText().trim();
//        String AGE = txtAge.getText().trim() 
        int age = Integer.parseInt(txtAge.getText().trim());
        Integer numOPet = 0;
        numOPet = Integer.parseInt(txtNumberOfPEt.getText().trim());
        String symptom = txtSymptoms.getText().trim();
        if(rbMale.isSelected()){
            gender = true;
        }else gender = false;
        //ID
//        if (id.trim().isEmpty()) {// || !id.matches("\\w+") || id.trim().length() > 10
//            JOptionPane.showMessageDialog(null, "Registration ID can not null");
//            txtRegistrationID2.requestFocus();
//            return;
//        }else if(id.matches("\\\\w+")){
//            JOptionPane.showMessageDialog(null, "Registration ID is not correct format");
//            txtRegistrationID2.requestFocus();
//            return;
//        }else if(id.trim().length() > 10){
//            JOptionPane.showMessageDialog(null, "Registration ID must be < 10 characters");
//            txtRegistrationID2.requestFocus();
//            return;
//        }
        /*---------------------------------------------------------------------------------------------*/
        
        //FULLNAME
//        String fullname = txtFullName.getText();
//        if (fullname.length() > 50) {
//            JOptionPane.showMessageDialog(null, "Name length must < 50 characters");
//            txtFullName.requestFocus();
//            return;
//        }else if (fullname.trim().isEmpty()) {
//            JOptionPane.showMessageDialog(null, "Name can not null");
//            txtFullName.requestFocus();
//            return;
//        }else if(id.matches("\\\\w+")){
//            JOptionPane.showMessageDialog(null, "Name is not correct format");
//            txtFullName.requestFocus();
//            return;
//        }
        
        
//        
//        Integer age = 0;
//        try {
//            age = Integer.parseInt(txtAge.getText());
//            if (age < 1) {
//                JOptionPane.showMessageDialog(null, "Age must be > 0");
//                txtAge.requestFocus();
//                return;
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Age is not correct format ( must be number )");
//            txtAge.requestFocus();
//            return;
//        }
//        if (rbMale.isSelected() && rbFemale.isSelected()) {
//            JOptionPane.showMessageDialog(null, "Please tick gender");
//            return;
//        }
//        if (rbMale.isSelected()) {
//            gender = true;
//        } else if (rbFemale.isSelected()) {
//            gender = false;
//        } else {
//            JOptionPane.showMessageDialog(null, "Please tick check box sex");
//            return;
//        }
//        String email = txtEmail.getText();
//        if (email.trim().isEmpty() || email.length() > 30 || !email.matches("\\w+@\\w+[.]\\w+")) {
//            JOptionPane.showMessageDialog(null, "Email is not null or not correct format");
//            txtEmail.requestFocus();
//            return;
//        }
//        String phone = txtPhone.getText();
//        if (phone.trim().isEmpty() || phone.length() > 15 || !phone.matches("\\d{10,11}")) {
//            JOptionPane.showMessageDialog(null, "Number phone is not null or number phone length must be 10-11 digits");
//            txtPhone.requestFocus();
//            return;
//        }
//        String address = txtAddress.getText();
//        if (address.trim().isEmpty() || address.length() > 200) {
//            JOptionPane.showMessageDialog(null, "Address is empty or not over length 200 characters");
//            txtAddress.requestFocus();
//            return;
//        }
//        Integer numofpet = 0;
//        try {
//            numofpet = Integer.parseInt(txtAge.getText());
//            if (numofpet==null) {
//                JOptionPane.showMessageDialog(null, "Num of Pet is not null");
//                txtNumberOfPEt.requestFocus();
//                return;
//            }
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(null, "Num of pet is not correct format ( must be number )");
//            txtNumberOfPEt.requestFocus();
//            return;
//        }
//        
//        String symptoms = txtSymptoms.getText();
//        if (symptoms.trim().isEmpty()) {
//            JOptionPane.showMessageDialog(null, "Symptom is not empty");
//            txtSymptoms.requestFocus();
//            return;
//        }

        RegistrationDTO dto = new RegistrationDTO(registrationID, fullName, age, gender, email, phone, address, numOPet,  symptom);
        if (addnew) {
            for (int i = 0; i < list.size(); i++) {
                if (list.get(i).getRegistrationID().equalsIgnoreCase(id)) {
                    JOptionPane.showMessageDialog(null, "Registration ID had exists");
                    txtRegistrationID2.requestFocus();
                    txtRegistrationID2.setEditable(true);
                    return;
                }
            }
            try {
                regInterface = (RegistrationInterface) Naming.lookup(servicename);
                if (regInterface != null) {
                    if (regInterface.createRegistration(dto)) {
                        JOptionPane.showMessageDialog(null, "Added successfully");
                        txtRegistrationID2.setBackground(Color.white);
                        loadData();
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            try {
                regInterface = (RegistrationInterface) Naming.lookup(servicename);
                if (regInterface != null) {
                    int temp = JOptionPane.showConfirmDialog(null, "Do you want to update ?");
                    if (regInterface.updateRegistration(dto)) {
                        if (temp == JOptionPane.YES_OPTION) {
                            JOptionPane.showMessageDialog(null, "Update successfully !!");
                            txtRegistrationID2.setBackground(Color.white);
                            loadData();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Update fail !!");
                    }
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Can't connect with your server");
            }
        }
        btnSave.setEnabled(false);
        btnDelete.setEnabled(false);
        setEmpty();
        setnoEdit();
        txtRegistrationID2.setEditable(true);

        addnew = false;
    }//GEN-LAST:event_btnSaveActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed

    }//GEN-LAST:event_txtEmailActionPerformed

    private void tblRegistrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegistrationMouseClicked
        addnew = false;
        btnSave.setEnabled(true);
        btnDelete.setEnabled(true);
        txtRegistrationID2.setBackground(Color.gray);

        txtSearchByName.setText("");
        txtRegistrationID2.setEditable(false);
        setEdit();

        ArrayList<RegistrationDTO> dto = RegistrationDAO.readFile(filename);
        int row = tblRegistration.getSelectedRow();
        String id = (String) tblRegistration.getValueAt(row, 0);
        for (int i = 0; i < dto.size(); i++) {
            if (dto.get(i).getRegistrationID().equalsIgnoreCase(id)) {
                txtRegistrationID2.setText(dto.get(i).getRegistrationID());
                txtFullName.setText(dto.get(i).getFullname());
                txtAge.setText(String.valueOf(dto.get(i).getAge()));
                if (dto.get(i).isGender()) {
                    rbMale.setSelected(true);
                    rbFemale.setSelected(false);
                }
                if (!dto.get(i).isGender()) {
                    rbMale.setSelected(false);
                    rbFemale.setSelected(true);
                }
                txtEmail.setText(dto.get(i).getEmail());
                txtPhone.setText(dto.get(i).getPhone());
                txtAddress.setText(dto.get(i).getAddress());
                txtNumberOfPEt.setText(String.valueOf(dto.get(i).getNumberOfPet()));
                txtSymptoms.setText(dto.get(i).getSymptoms());
            }
        }
    }//GEN-LAST:event_tblRegistrationMouseClicked

    private void cbSortByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSortByNameActionPerformed
       ArrayList<RegistrationDTO> list = RegistrationDAO.readFile(filename);
        txtSearchByName.setText("");

        if (cbSortByName.getSelectedItem().equals("Sort ascending")) {

            RegistrationDAO.sortAscending(list);
            Vector header = new Vector();
            Vector data = new Vector();
            header.add("ID");
            header.add("Full name");
            header.add("Age");
            header.add("Gender");
            header.add("Phone");
            header.add("Address");
            for (RegistrationDTO x : list) {
                Vector row = new Vector();
                row.add(x.getRegistrationID());
                row.add(x.getFullname());
                row.add(x.getAge());
                if (x.isGender()) {
                    row.add("Male");
                } else {
                    row.add("Female");
                }
                row.add(x.getPhone());
                row.add(x.getAddress());
                data.add(row);
                model = (DefaultTableModel) tblRegistration.getModel();
                model.setDataVector(data, header);
            }
        } else if (cbSortByName.getSelectedItem().equals("Sort descending")) {

            RegistrationDAO.sortDescending(list);
            Vector header = new Vector();
            Vector data = new Vector();
            header.add("ID");
            header.add("Full name");
            header.add("Age");
            header.add("Gender");
            header.add("Phone");
            header.add("Address");
            for (RegistrationDTO x : list) {
                Vector row = new Vector();
                row.add(x.getRegistrationID());
                row.add(x.getFullname());
                row.add(x.getAge());
                if (x.isGender()) {
                    row.add("Male");
                } else {
                    row.add("Female");
                }
                row.add(x.getPhone());
                row.add(x.getAddress());
                data.add(row);
                model = (DefaultTableModel) tblRegistration.getModel();
                model.setDataVector(data, header);
            }
        }
        btnSave.setEnabled(false);
        btnDelete.setEnabled(false);
        setnoEdit();
        setEmpty();
        txtRegistrationID2.setEditable(true);
    }//GEN-LAST:event_cbSortByNameActionPerformed

    private void btnGetAllDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetAllDataActionPerformed

        txtSearchByName.setText("");
        try {
            regInterface = (RegistrationInterface) Naming.lookup(servicename);
            if (regInterface != null) {
                loadData();
                setEmpty();
                setnoEdit();
                btnSave.setEnabled(false);
                btnDelete.setEnabled(false);
                txtRegistrationID2.setEditable(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Can't connect with your server");
        }
    }//GEN-LAST:event_btnGetAllDataActionPerformed

    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
       setEmpty();
       
        int temp = 0;
        btnSave.setEnabled(false);
        btnDelete.setEnabled(false);
        setnoEdit();
        String nameSearch = txtSearchByName.getText();
        Vector header = new Vector();
        Vector data = new Vector();
        header.add("ID");
        header.add("Full name");
        header.add("Age");
        header.add("Gender");
        header.add("Phone");
        header.add("Address");
        ArrayList<RegistrationDTO> list = RegistrationDAO.readFile(filename);
        try {
            regInterface = (RegistrationInterface) Naming.lookup(servicename);
            if (regInterface != null) {
                for (int i = 0; i < list.size(); i++) {
                    if (list.get(i).getFullname().equalsIgnoreCase(nameSearch)) {
//                        int x = tblRegistration.getSelectedRow();
                        Vector row = new Vector();
                        row.add(list.get(i).getRegistrationID());
                        row.add(list.get(i).getFullname());
                        row.add(list.get(i).getAge());
                        if (list.get(i).isGender()) {
                            row.add("Male");
                        } else {
                            row.add("Female");
                        }
                        row.add(list.get(i).getPhone());
                        row.add(list.get(i).getAddress());
                        data.add(row);
                        model = (DefaultTableModel) tblRegistration.getModel();
                        model.setDataVector(data, header);
                        temp++;
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Server is not connect");
            }
            if (temp == 0) {
                JOptionPane.showMessageDialog(null, "Full name is not exists");
                loadData();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Server is not connect");
        }
        cbSortByName.setSelectedIndex(0);
        txtRegistrationID2.setEditable(true);
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrationManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrationManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrationManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrationManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrationManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnGetAllData;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbSortByName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JTable tblRegistration;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtNumberOfPEt;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtRegistrationID2;
    private javax.swing.JTextField txtSearchByName;
    private javax.swing.JTextField txtSymptoms;
    // End of variables declaration//GEN-END:variables
}
